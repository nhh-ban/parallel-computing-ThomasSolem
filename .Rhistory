registerDoParallel(cl)
# Using foreach to run simTweedieTest in parallel
results <- foreach(i = 1:M, .combine = c) %dopar% {
simTweedieTest(N)
}
proportion <- sum(results < sig) / M
# Close the cluster
stopCluster(cl)
return(proportion)
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Sol3")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <- function(N, M, sig) {
# Load necessary libraries
require(parallel)
require(doParallel)
# The function detectCores finds the number of cores
# available on the machine. We update the "Cores"-value
# to the minimum of the chosen cores and the available cores.
maxcores <- 12
Cores <- min(detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Register the cluster
registerDoParallel(cl)
# Using foreach to run simTweedieTest in parallel
results <- foreach(i = 1:M, .combine = c) %dopar% {
simTweedieTest(N)
}
proportion <- sum(results < sig) / M
# Close the cluster
stopCluster(cl)
return(proportion)
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Sol3")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <- function(N, M, sig) {
# Load necessary libraries
require(parallel)
require(doParallel)
# The function detectCores finds the number of cores
# available on the machine. We update the "Cores"-value
# to the minimum of the chosen cores and the available cores.
maxcores <- 12
Cores <- min(detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Register the cluster
registerDoParallel(cl)
# Using foreach to run simTweedieTest in parallel
results <- foreach(i = 1:M, .combine = c) %dopar% {
simTweedieTest(N)
}
proportion <- sum(results < sig) / M
# Close the cluster
stopCluster(cl)
return(proportion)
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Sol3")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
tic("Sol3")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
warinings()
warnings()
# Assignment 2:
MTweedieTests <- function(N, M, sig) {
# Load necessary libraries
require(parallel)
require(doParallel)
# The function detectCores finds the number of cores
# available on the machine. We update the "Cores"-value
# to the minimum of the chosen cores and the available cores.
maxcores <- 12
Cores <- min(detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Register the cluster
registerDoParallel(cl)
# Export necessary functions and load required libraries on each worker
clusterExport(cl, "simTweedieTest")
clusterEvalQ(cl, {
library(tweedie)
})
# Using foreach to run simTweedieTest in parallel
results <- foreach(i = 1:M, .combine = c) %dopar% {
simTweedieTest(N)
}
proportion <- sum(results < sig) / M
# Close the cluster
stopCluster(cl)
return(proportion)
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Sol3")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
toc(log = TRUE)
library(tictoc)
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", "scripts/"))
# Source the script
source(paste0(script_path, script))
# Stop timer and print results
toc(log = TRUE)
}
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", "scripts/"))
# Source the script
source(paste0("scripts/", solutions))
# Stop timer and print results
toc(log = TRUE)
}
script_path <- "scripts/"
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", solution))
# Source the script
source(paste0(script_path, solution))
# Stop timer and print results
toc(log = TRUE)
}
print(printTicTocLog())
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
tic("Sol1")
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
toc(log = TRUE)
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
library(doParallel)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
# The function detectCores finds the number of cores
# available on the machine. We update the "Cores"-value
# to the minimum of the chosen cores and the available cores.
maxcores <- 12
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Now that we're done, we close off the clusters
stopCluster(cl)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
library(tictoc)
library(doParallel)
#function to store the time:
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic.clearlog()
# The function detectCores finds the number of cores
# available on the machine. We update the "Cores"-value
# to the minimum of the chosen cores and the available cores.
maxcores <- 12
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
Sys.sleep(1)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Now that we're done, we close off the clusters
stopCluster(cl)
toc(log = TRUE)
# - Create a file `timer.r` in the root folder
#(i.e. the same folder as this README-file).
#The `timer.r`-file should source the files in `scripts\`,
#and use tictoc to time them.
#Include a comment in your final script on which method is fastest, and any idea
#you might have that explains the result.
# ----------------
library(tictoc)
script_path <- "scripts/"
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", solution))
# Source the script
source(paste0(script_path, solution))
# Stop timer and print results
toc(log = TRUE)
}
printTicTocLog() %>%
knitr::kable()
library(tictoc)
script_path <- "scripts/"
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", solution))
# Source the script
source(paste0(script_path, solution))
printTicTocLog() %>%
knitr::kable()
# Stop timer and print results
toc(log = TRUE)
}
# - Create a file `timer.r` in the root folder
#(i.e. the same folder as this README-file).
#The `timer.r`-file should source the files in `scripts\`,
#and use tictoc to time them.
#Include a comment in your final script on which method is fastest, and any idea
#you might have that explains the result.
# ----------------
library(tictoc)
script_path <- "scripts/"
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", solution))
# Source the script
source(paste0(script_path, solution))
# Stop timer and print results
toc(log = TRUE)
}
printTicTocLog() %>%
knitr::kable()
# - Create a file `timer.r` in the root folder
#(i.e. the same folder as this README-file).
#The `timer.r`-file should source the files in `scripts\`,
#and use tictoc to time them.
#Include a comment in your final script on which method is fastest, and any idea
#you might have that explains the result.
# ----------------
library(tictoc)
script_path <- "scripts/"
solutions <- c("Solution1.r", "Solution2.r", "Solution3.r")
for(solution in solutions) {
tic(paste("Timing", solution))
# Source the script
source(paste0(script_path, solution))
# Stop timer and print results
toc(log = TRUE)
}
printTicTocLog() %>%
knitr::kable()
# The third method is the fastest. It is likely due to that is manages to split
# the work better along the cores. The second solution is the worst.
# This may be due to that is loands in one task at the time, not taking advandage of the
# available cores.
